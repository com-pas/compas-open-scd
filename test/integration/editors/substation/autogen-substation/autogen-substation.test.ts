import { expect, fixture, html } from '@open-wc/testing';

import '../../../../unit/mock-editor.js';
import { MockEditor } from '../../../../unit/mock-editor.js';
import '../../../../../src/editors/substation/autogen-substation/autogen-substation.js';
import CompasAutogenerateSubstation from '../../../../../src/editors/substation/autogen-substation/autogen-substation.js';

describe('autogen-substation-integration', () => {
  if (customElements.get('') === undefined)
    customElements.define('autogen-substation', CompasAutogenerateSubstation);

  let parent: MockEditor;
  let element: CompasAutogenerateSubstation;
  let validSCL: XMLDocument;

  before(async () => {
    parent = await fixture(html`
      <mock-editor><autogen-substation></autogen-substation></mock-editor>
    `);

    validSCL = await fetch(
      '/test/testfiles/menu/autogen-substation/autogen-substation-demo.scd'
    )
      .then(response => response.text())
      .then(str => new DOMParser().parseFromString(str, 'application/xml'));

    element = <CompasAutogenerateSubstation>(
      parent.querySelector('autogen-substation')!
    );

    element.doc = validSCL;
    await element.updateComplete;
    await element.run();
    await element.requestUpdate();
  });

  it('creates 2 voltage level with default description', () => {
    expect(
      element.doc.querySelectorAll(':root > Substation > VoltageLevel').length
    ).to.equal(2);
    expect(
      validSCL
        .querySelectorAll(':root > Substation > VoltageLevel')[0]
        ?.getAttribute('name')
    ).to.equal('E01');
    expect(
      validSCL
        .querySelector(':root > Substation > VoltageLevel')
        ?.getAttribute('desc')
    ).to.equal('Voltage Level generated by CoMPAS');
    expect(
      validSCL
        .querySelectorAll(':root > Substation > VoltageLevel')[1]
        ?.getAttribute('name')
    ).to.equal('E02');
    expect(
      validSCL
        .querySelector(':root > Substation > VoltageLevel')
        ?.getAttribute('desc')
    ).to.equal('Voltage Level generated by CoMPAS');
  });

  it('creates bays inside the voltageLevels based on the name convention', () => {
    expect(
      validSCL
        .querySelectorAll(':root > Substation > VoltageLevel')[0]
        .querySelectorAll('Bay').length
    ).to.equal(4);
    expect(
      validSCL
        .querySelectorAll(':root > Substation > VoltageLevel')[1]
        .querySelectorAll('Bay').length
    ).to.equal(3);
  });
  it('creates correct number of conducting equipments', () => {
    expect(
      validSCL.querySelectorAll(
        ':root > Substation > VoltageLevel > Bay > ConductingEquipment'
      ).length
    ).to.equal(17);
  });
  it('creates only unique conducting equipment names', () => {
    const nameArray: string[] = Array.from(
      validSCL.querySelectorAll(
        ':root > Substation > VoltageLevel > Bay > ConductingEquipment'
      )
    ).map(item => item.getAttribute('name')!);
    const nameSet = new Set(nameArray);
    expect(nameArray.length).to.equal(nameSet.size);
  });
  it('creates unique conducting equipment name, if no prefix is there', () => {
    expect(
      validSCL
        .querySelector(
          ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(1)'
        )
        ?.getAttribute('name')
    ).to.equal('QA1');
    expect(
      validSCL
        .querySelector(
          ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(4)'
        )
        ?.getAttribute('name')
    ).to.equal('QB3');
  });
  it('uses prefix for conducting equipment name, if prefix is available', () => {
    expect(
      validSCL
        .querySelector(
          ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(2)'
        )
        ?.getAttribute('name')
    ).to.equal('QB1');
    expect(
      validSCL
        .querySelector(
          ':root > Substation > VoltageLevel > Bay > ConductingEquipment:nth-child(3)'
        )
        ?.getAttribute('name')
    ).to.equal('QB2');
  });
});
